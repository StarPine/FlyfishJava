plugins {
    id 'com.android.library'
}

android {
    useLibrary 'org.apache.http.legacy'
    compileSdkVersion 31
    buildToolsVersion "30.0.2"

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
        ndk {abiFilters 'armeabi-v7a','arm64-v8a'}

        buildConfigField "String", "SDK_VERSION_NAME", "\"${rootProject.ext.hostVersionName}\""
        buildConfigField "int", "SDK_VERSION_CODE", "${rootProject.ext.hostVersionCode}"

    }
    packagingOptions {
        exclude 'com/unionpay/client3/tsm/**.java'
        exclude 'com/unionpay/client3/tsm/**.aidl'
        exclude 'libs/msa_mdid_1.0.13.jar'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs', 'src/main/jniLibs']
            java {
                srcDirs = ['src/main/java']
                excludes = ['libs/msa_mdid_1.0.13.jar']
                if (is_channel_merge.toBoolean()){
                    excludes = ['fly/fish/othersdk/*.java']
                }
            }

        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }


}

// 获取当前系统时间
def releaseTime() {
    return new Date().format("yyyyMMddHHmm", TimeZone.getTimeZone("GMT+08:00"))
}

tasks.configureEach { task ->
    if (task.name.equals("lint")) {
        //this is for speed up build
        task.enabled = false
    }
    if (task.name.contains("Test")) {
        //this is what you need
        task.enabled = false
    }
}

dependencies {
    implementation fileTree(include: ['*.jar','*.aar'], dir: 'libs')
    compileOnly files("libs/msa_mdid_1.0.13.jar")
//    compileOnly fileTree(include: ['*.jar','*.aar'], dir: 'libs')
    implementation project(':jg_push')
}

afterEvaluate {
    assembleRelease.doLast {
        def lib_out = file(rootProject.ext.outputDir + "/lib_out")
        def lib_out_libs = file(rootProject.ext.outputDir + "/lib_out/libs")
        def lib_out_assets = file(rootProject.ext.outputDir + "/lib_out/assets")
        def aarPath = "./build/outputs/aar/flyfishLib-release.aar"
        copy {
            from file(aarPath)
            rename("flyfishLib-release.aar", "${rootProject.ext.sdkName}_${rootProject.ext.hostVersionName}_${releaseTime()}_cp.aar")
            into lib_out
            exclude { details -> details.file.name.endsWith('msa_mdid_1.0.13.jar') }
        }
        copy {
            from zipTree(aarPath)
            include "classes.jar"
            rename("classes.jar", "${rootProject.ext.sdkName}_${rootProject.ext.hostVersionName}_${releaseTime()}.jar")
            into lib_out_libs
        }
//        copy {
//            from file("./libs")
//            into(lib_out_libs)
//        }
//        copy {
//            from file("./src/main/assets")
//            into(lib_out_assets)
//        }
    }
}